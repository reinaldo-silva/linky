import { Badge } from "@/components/Badge";
import { TerminalCode } from "@/components/TerminalCode";

export default function Docs() {
  return (
    <div className="h-svh flex flex-col items-start overflow-x-hidden flex-1 mx-auto pt-28 pb-6 overflow-scroll space-y-5 scrollbar-hide">
      <div className="flex flex-col items-start">
        <h1 className="font-sans text-3xl font-semibold">Documentation</h1>
        <Badge variant="white">v1.0.0</Badge>
      </div>

      <p>
        Welcome to the documentation for the <strong>Linky!</strong> API, our
        URL shortening tool. The Linky API allows you to convert long URLs into
        short links easily and efficiently. It is designed to be user-friendly
        and can be integrated into various applications that need to generate
        shorter, more manageable URLs. This documentation provides an overview
        of how to use the API, the available parameters, and what to expect in
        terms of responses.
      </p>

      <h2 className="font-semibold border-b text-xl w-full">Request</h2>

      <div className="flex gap-1">
        <Badge>POST</Badge>
        <Badge variant="outline">/api/shorten</Badge>
      </div>

      <div className="ml-2 border-l-2 px-4 w-full">
        <ul className="space-y-5">
          <li className="space-y-2">
            <div className="flex space-x-1">
              <Badge>url</Badge>
              <Badge variant="white">string</Badge>
              <Badge variant="required">Required</Badge>
            </div>
            <p>
              The <code className="code-text">url</code> parameter is required
              and should be a string containing the full address of the URL you
              want to shorten. There is no need to include the protocol (
              <code className="code-text">https://</code> or{" "}
              <code className="code-text">http://</code>), as the system
              automatically identifies it and redirects to the correct location.
            </p>

            <div>
              <strong>Example:</strong>
              <TerminalCode>
                <p>{`   "url": "google.com"`}</p>
              </TerminalCode>
            </div>
          </li>

          <li className="space-y-2">
            <div className="flex space-x-1">
              <Badge>exp</Badge>
              <Badge variant="white">number</Badge>
              <Badge variant="optional">Optional</Badge>
            </div>
            <p>
              The <code className="code-text">exp</code> parameter is optional
              and represents the expiration time of the shortened link, in days.
              If not provided, the link will have a default expiration time of 1
              day.
            </p>

            <div>
              <strong>Example:</strong>
              <TerminalCode>
                <p>{`   "exp": 7`}</p>
              </TerminalCode>
            </div>
          </li>
        </ul>
      </div>

      <h2 className="font-semibold border-b text-xl w-full">Response</h2>

      <div className="flex gap-1">
        <Badge>200</Badge>
      </div>

      <p>
        The API response will be a JSON object containing the following
        information:
      </p>

      <div className="ml-2 border-l-2 px-4 w-full">
        <ul className="space-y-5">
          <li className="space-y-2">
            <div className="flex space-x-1">
              <Badge>message</Badge>
              <Badge variant="white">string</Badge>
            </div>
            <p>Informative message.</p>
          </li>
          <li className="space-y-2">
            <div className="flex space-x-1">
              <Badge>shortUrl</Badge>
              <Badge variant="white">string</Badge>
            </div>
            <p>The shortened URL generated by the API.</p>
          </li>
        </ul>
      </div>

      <div className="w-full">
        <strong>Example:</strong>
        <TerminalCode>
          <p>{`{`}</p>
          <p>{`     "message": "Linky your url!"`}</p>
          <p>{`     "shortUrl": "localhost:3000/s/JUli3GrR"`}</p>
          <p>{`}`}</p>
        </TerminalCode>
      </div>
    </div>
  );
}
